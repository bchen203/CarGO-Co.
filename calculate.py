
""""
(takes in a 2D array as an input)

    checks if move is legal function (container name, beginning location, end location - pass in these variables)
    calculating time to move container from point a to point b function (manhattan distance function)
    move/load/offload from the manifest.py (snag and alter them to work)

"""
#nabbed from another branch for testing purposes 
#REMOVE LATER : container class
class Container:
    def __init__(self, container_weight, container_description, container_id):
        self.weight = container_weight
        # Note: reserved container names are UNUSED, NAN (will need to check if the operator inputs these names later on)
        self.description = container_description
        # Added id variable to uniquely identify containers (will be used in solution calculations)
        self.id = container_id

    def print(self):
        print(f"container weight: {self.weight}")
        print(f"container description: {self.description}")

    def changeWeight(self, weight):
        # TODO: [LOG] add log here for adding weight to container (this function call will only occur when the operator adds the weight to a container being loaded)
        self.weight = weight

class Calculate:
    def __init__(self,manifest_array):
        self.ship_bay_array = manifest_array

    #adapted from manifest.py code by Jake Blackwell (group decided to move implementation here)
    #checks if a move: passing in start location (rowStart,colStart) and end location (rowEnd,colEnd)
    def is_start_legal(self,rowStart,colStart):

        if(rowStart < 0 or rowStart >= 8 or colStart < 0 or colStart >= 12): #checks if position is out of bounds
             print("[ERROR] start position is out of bounds")
             return False
        
        containerMoving = self.ship_bay_array[rowStart][colStart]
        if(rowStart >= 7 or self.ship_bay_array[rowStart+1][colStart].description == "UNUSED"): #checks if container's start pos has a container above it

            if containerMoving.description != "UNUSED" and containerMoving.description != "NAN": #checks if start pos has a container
                return True

            else:
                print("[ERROR] cannot move a container with the name \"UNUSED\" or \"NAN\"")

        else:
            print("[ERROR] cannot move container because there is container above starting position")
        
        return False
    
    def is_end_legal(self,rowEnd,colEnd):

        if(rowEnd < 0 or rowEnd >= 8 or colEnd < 0 or colEnd >= 12): #checks if position is out of bounds
             print("[ERROR] end position is out of bounds")
             return False
        
        if self.ship_bay_array[rowEnd][colEnd].description == "UNUSED": #checks if end pos is empty
                    if rowEnd == 0 or self.ship_bay_array[rowEnd-1][colEnd].description != "UNUSED": #DAVID: checks to see if container would be floating at end pos
                        return True
                    else:
                        print("[ERROR] cannot move container to location where it is floating")
        else:
            print("[ERROR] cannot move a container to an occupied location")
        
        return False




    def is_legal_ship_move(self,rowStart,colStart,rowEnd,colEnd):
        return self.is_start_legal(rowStart,colStart) and self.is_end_legal(rowEnd,colEnd)
    
    #calculates manhattan distance between start location (rowStart,colStart) and end location (rowEnd,colEnd) - FOR ONLY LOCATIONS INSIDE SHIP
    def calculate_time(self,rowStart,colStart,rowEnd,colEnd):
        return abs(rowStart-rowEnd) + abs(colStart-colEnd)
    

    # move containers that already exist on the ship
    # [rowStart][colStart]: starting location of container (to be replaced with "UNUSED")
    # [rowEnd][colEnd]: ending location of container (to be replaced with the moved container)
    def moveContainer(self, rowStart, colStart, rowEnd, colEnd):
        containerMoving = self.ship_bay_array[rowStart][colStart]

        if(self.is_legal_ship_move(rowStart,colStart,rowEnd,colEnd)):
            # TODO: [LOG] container [name] was moved from [startLocation] to [endLocation]
            self.ship_bay_array[rowStart][colStart] = Container(0, "UNUSED",-1)
            self.ship_bay_array[rowEnd][colEnd] = containerMoving


    # load containers onto the ship
    # containerDescription: the description of a container provided by the operator
    # [rowEnd][colEnd]: ending location of container <-- NOTE: in the final implementation, this parameter will be generated by the solution, not the operator
    def loadContainer(self, containerDescription, rowEnd, colEnd):
        if containerDescription != "UNUSED" and containerDescription != "NAN":
            if(self.is_end_legal(rowEnd,colEnd)):
                    # TODO: [LOG] container [name] was loaded onto the ship. It is located at [rowEnd][colEnd]
                    # NOTE: a weight of -1 is given as a placeholder weight since the weight of the container will not be determined until the operator picks up the container during the instruction phase of the program
                    self.ship_bay_array[rowEnd][colEnd] = Container(-1, containerDescription,10) # the id of 10 is temporary until generateID() is added
                
        else:
            print("[ERROR] cannot load a container with the name \"UNUSED\" or \"NAN\"")


    # offload containers onto the ship
    # [rowStart][colStart]: location of the container to be offloaded <-- NOTE: in the final implementation, this parameter will be generated by the solution, not the operator
    # ERROR CHECKING: a container can only be offloaded if the given location is in the 2D ship_bay_array range and the container being offloaded is NOT "UNUSED" nor "NAN"
    def offloadContainer(self, rowStart, colStart):
        if(self.is_start_legal(rowStart,colStart)):
                # TODO: [LOG] container [name] was offloaded from the ship.
                self.ship_bay_array[rowStart][colStart] = Container(0, "UNUSED",-1)