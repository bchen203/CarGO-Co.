
""""
(takes in a 2D array as an input)

    checks if move is legal function (container name, beginning location, end location - pass in these variables)
    calculating time to move container from point a to point b function (manhattan distance function)
    move/load/offload from the manifest.py (snag and alter them to work)

"""
#nabbed from another branch for testing purposes 
#REMOVE LATER : container class
class Container:
    def __init__(self, container_weight, container_description, container_id):
        self.weight = container_weight
        # Note: reserved container names are UNUSED, NAN (will need to check if the operator inputs these names later on)
        self.description = container_description
        # Added id variable to uniquely identify containers (will be used in solution calculations)
        self.id = container_id

    def print(self):
        print(f"container weight: {self.weight}")
        print(f"container description: {self.description}")

    def changeWeight(self, weight):
        # TODO: [LOG] add log here for adding weight to container (this function call will only occur when the operator adds the weight to a container being loaded)
        self.weight = weight

class Calculate:
    def __init__(self,manifest_array):
        self.ship_bay_array = manifest_array

    #adapted from manifest.py code by Jake Blackwell (group decided to move implementation here)
    #checks if a move: passing in start location (y1,x1) and end location (y2,x2)
    def is_start_legal(self,y1,x1):

        if(x1 < 0 or x1 >= 12 or y1 < 0 or y1 >= 8): #checks if position is out of bounds
             print("[ERROR] start position is out of bounds")
             return False
        
        containerMoving = self.ship_bay_array[y1][x1]
        if(y1 >= 7 or self.ship_bay_array[y1+1][x1].description == "UNUSED"): #checks if container's start pos has a container above it

            if containerMoving.description != "UNUSED" and containerMoving.description != "NAN": #checks if start pos has a container
                return True

            else:
                print("[ERROR] cannot move a container with the name \"UNUSED\" or \"NAN\"")

        else:
            print("[ERROR] cannot move container because there is container above starting position")
        
        return False
    
    def is_end_legal(self,y2,x2):

        if(x2 < 0 or x2 >= 12 or y2 < 0 or y2 >= 8): #checks if position is out of bounds
             print("[ERROR] end position is out of bounds")
             return False
        
        if self.ship_bay_array[y2][x2].description == "UNUSED": #checks if end pos is empty
                    if y2 == 0 or self.ship_bay_array[y2-1][x2].description != "UNUSED": #DAVID: checks to see if container would be floating at end pos
                        return True
                    else:
                        print("[ERROR] cannot move container to location where it is floating")
        else:
            print("[ERROR] cannot move a container to an occupied location")
        
        return False




    def is_legal_ship_move(self,y1,x1,y2,x2):
        return self.is_start_legal(y1,x1) and self.is_end_legal(y2,x2)
    
#calculates manhattan distance between start location (y1,x1) and end location (y2,x2) - FOR ONLY LOCATIONS INSIDE SHIP
    def calculate_time(self,y1,x1,y2,x2):
        return abs(y1-y2) + abs(x1-x2)
    

        # move containers that already exist on the ship
    # [y1][x1]: starting location of container (to be replaced with "UNUSED")
    # [y2][x2]: ending location of container (to be replaced with the moved container)
    def moveContainer(self, y1, x1, y2, x2):
        containerMoving = self.ship_bay_array[y1][x1]

        if(self.is_legal_ship_move(y1,x1,y2,x2) ):
            # TODO: [LOG] container [name] was moved from [startLocation] to [endLocation]
            self.ship_bay_array[y1][x1] = Container(0, "UNUSED",-1)
            self.ship_bay_array[y2][x2] = containerMoving


    # load containers onto the ship
    # containerDescription: the description of a container provided by the operator
    # [y][x]: ending location of container <-- NOTE: in the final implementation, this parameter will be generated by the solution, not the operator
    def loadContainer(self, containerDescription, y, x):
        if containerDescription != "UNUSED" and containerDescription != "NAN":
            if(self.is_end_legal(y,x)):
                    # TODO: [LOG] container [name] was loaded onto the ship. It is located at [y][x]
                    # NOTE: a weight of -1 is given as a placeholder weight since the weight of the container will not be determined until the operator picks up the container during the instruction phase of the program
                    self.ship_bay_array[y][x] = Container(-1, containerDescription,-1)
                
        else:
            print("[ERROR] cannot load a container with the name \"UNUSED\" or \"NAN\"")


    # offload containers onto the ship
    # [y][x]: location of the container to be offloaded <-- NOTE: in the final implementation, this parameter will be generated by the solution, not the operator
    # ERROR CHECKING: a container can only be offloaded if the given location is in the 2D ship_bay_array range and the container being offloaded is NOT "UNUSED" nor "NAN"
    def offloadContainer(self, y, x):
        if(self.is_start_legal(y,x)):
                # TODO: [LOG] container [name] was offloaded from the ship.
                self.ship_bay_array[y][x] = Container(0, "UNUSED",-1)




if __name__ == "__main__":
    
    array = [[Container(0, "UNUSED",-1) for i in range(12)] for j in range(8)]

    """
    for i in array:
         print("[")
         for j in i:
              print(j.description)
         print("]")
    """

    calculator = Calculate(array)
    array[0][0] = Container(1,"CoolCatCars",0)
    array[1][0] = Container(2,"DogDerbies",1)
    print("Testing is_start_legal function:")

    print("TEST 1:")

    #TEST 1: is_start_legal - testing out of bounds error checking
    calculator.is_start_legal(8,6)
    calculator.is_start_legal(-1,6)
    calculator.is_start_legal(6,12)
    calculator.is_start_legal(6,-1)
    print()

    print("TEST 2:")
    #TEST 2: is_start_legal - has container above start position
    calculator.is_start_legal(0,0)
    print()
    print("TEST 3:")
    #TEST 3: is_start_legal - is start position empty
    calculator.is_start_legal(0,1)
    print()
    print("TEST 4:")
    #TEST 4 is_start_legal - is valid start position
    if(calculator.is_start_legal(1,0)):
        print("Starting position is legal")
    else:
        print("Start position is not legal")

    print()
    print("Testing is_end_legal function:")
    print("TEST 5:")
    #TEST 5: is_end_legal - testing out of bounds error checking
    calculator.is_end_legal(8,6)
    calculator.is_end_legal(-1,6)
    calculator.is_end_legal(6,12)
    calculator.is_end_legal(6,-1)
    print()
    print("TEST 6:")
    #TEST 6: is_end_legal - is end position occupied
    calculator.is_end_legal(0,0)
    calculator.is_end_legal(1,0)
    print()
    print("TEST 7:")
    #TEST 7 is_end_legal - is end position floating
    calculator.is_end_legal(4,4)
    print()
    print("TEST 8:")
    #TEST 8 is_end_legal - is end position legal
    if(calculator.is_start_legal(1,0)):
        print("Ending position is legal")
    else:
        print("Ending position is not legal")
    
    print()
    print("TEST 9:")
    print("Testing is_legal_ship_move function:")
    #TEST 9 is_legal_ship move - evaluates true when both start and end positions are valid
    if(calculator.is_legal_ship_move(1,0,0,5)):
        print("Move is legal")
    else:
         print("Move is not legal")

    print()
    print("TEST 10:")
    #TEST 10 is_legal_ship move - evaluates false when either start and end positions are invalid
    if(calculator.is_legal_ship_move(2,2,0,5)): #when start pos is not legal and end pos is legal
        print("Move is legal")
    else:
         print("Move is not legal")

    if(calculator.is_legal_ship_move(1,0,1,5)): #when start pos is legal and end pos is not legal
        print("Move is legal")
    else:
         print("Move is not legal")

    if(calculator.is_legal_ship_move(2,2,1,5)): #when both pos are not legal
        print("Move is legal")
    else:
         print("Move is not legal")

    print()
    print("Testing moveContainer function:")
    print("TEST 11:")
    #TEST 11 moveContainer - moves container when positions are legal
    #calculator.is_end_legal(0,2)
    
    calculator.moveContainer(1,0,0,2)
    if(calculator.ship_bay_array[1][0].description == "UNUSED" and calculator.ship_bay_array[0][2].description != "UNUSED"):
         print("Container successfully moved")
    else:
         print("Container failed to move")
    calculator.moveContainer(0,2,1,0)

    print()
    print("TEST 12:")
    #TEST 12 moveContainer - don't move container when positions are not both legal
    calculator.moveContainer(0,0,0,2)
    if(calculator.ship_bay_array[0][0].description == "UNUSED" and calculator.ship_bay_array[0][2].description != "UNUSED"):
         print("Container successfully moved")
    else:
         print("Container failed to move")
    
    print()
    print("Testing loadContainer function:")
    print("TEST 13:")
    #TEST 13 loadContainer - place container on ship successfully
    calculator.loadContainer("CillianCargos",0,3)
    if(calculator.ship_bay_array[0][3].description != "UNUSED"):
         print("Container successfully placed on ship")
    else:
         print("Container unsuccessful in placing on ship")
    

    print()
    print("TEST 14:")
    #TEST 14 loadContainer - fail to place container on ship - container name valid
    calculator.loadContainer("RogerRugs",0,0)
    if(calculator.ship_bay_array[0][4].description != "UNUSED"):
         print("Container successfully placed on ship")
    else:
         print("Container unsuccessful in placing on ship")

    print()
    print("TEST 15:")
    #TEST 15 loadContainer - fail to place container on ship - container name invalid
    calculator.loadContainer("UNUSED",0,5)
    if(calculator.ship_bay_array[0][5].description != "UNUSED"):
         print("Container successfully placed on ship")
    else:
         print("Container unsuccessful in placing on ship")

    print()
    print("Testing offloadContainer function:")
    
    print()
    print("TEST 16:")
    #TEST 16 offloadContainer - successfully offload a container from the ship
    calculator.offloadContainer(1,0)
    if(calculator.ship_bay_array[1][0].description == "UNUSED"):
         print("Container successfully offloaded from ship")
    else:
         print("Container unsuccessfully offloaded from ship")

    print()
    print("TEST 17:")
    #TEST 17 offloadContainer - unsuccessfully try to offload a container
    calculator.offloadContainer(0,7)
    if(calculator.ship_bay_array[0][7].description == "UNUSED"):
         print("Container successfully offloaded from ship")
    else:
         print("Container unsuccessfully offloaded from ship")
   
    print()
    print("Testing calculate_time function:")
    #TEST 18 calculate_time - compute manhattan distance
    if calculator.calculate_time(5,8,4,6) == 3:
         print("Time calculation is correct")
    else:
         print("Time calculation is incorrect")
    if calculator.calculate_time(4,6,5,8) == 3:
         print("Time calculation is correct")
    else:
         print("Time calculation is incorrect")
    if calculator.calculate_time(1,1,1,1) == 0:
         print("Time calculation is correct")
    else:
         print("Time calculation is incorrect")