
""""
(takes in a 2D array as an input)

    checks if move is legal function (container name, beginning location, end location - pass in these variables)
    calculating time to move container from point a to point b function (manhattan distance function)
    move/load/offload from the manifest.py (snag and alter them to work)

"""
#nabbed from another branch for testing purposes 
#REMOVE LATER : container class
class Container:
    def __init__(self, container_weight, container_description):
        self.weight = container_weight
        # Note: reserved container names are UNUSED, NAN (will need to check if the operator inputs these names later on)
        self.description = container_description

    def print(self):
        print(f"container weight: {self.weight}")
        print(f"container description: {self.description}")

class Calculate:
    def __init__(self,manifest_array):
        self.ship_bay_array = manifest_array

    #adapted from manifest.py code by Jake Blackwell (group decided to move implementation here)
    #checks if a move: passing in start location (y1,x1) and end location (y2,x2)
    def is_start_legal(self,y1,x1):

        if(x1 < 0 or x1 >= 12 or y1 < 0 or y1 >= 8): #checks if position is out of bounds
             print("[ERROR] start position is out of bounds")
             return False
        
        containerMoving = self.ship_bay_array[y1,x1]
        if(y1 >= 7 or self.ship_bay_array[y1+1,x1].description == "UNUSED"): #checks if container's start pos has a container above it

            if containerMoving.description != "UNUSED" and containerMoving.description != "NAN": #checks if start pos has a container
                return True

            else:
                print("[ERROR] cannot move a container with the name \"UNUSED\" or \"NAN\"")

        else:
            print("[ERROR] cannot move container because there is container above starting position")
        
        return False
    
    def is_end_legal(self,y2,x2):

        if(x2 < 0 or x2 >= 12 or y2 < 0 or y2 >= 8): #checks if position is out of bounds
             print("[ERROR] start position is out of bounds")
             return False
        
        if self.ship_bay_array[y2,x2].description == "UNUSED": #checks if end pos is empty
                    if y2 > 0 and self.ship_bay_array[y2-1,x2].description != "UNUSED": #DAVID: checks to see if container would be floating at end pos
                        return True
                    else:
                        print("[ERROR] cannot move container to location where it is floating")
        else:
            print("[ERROR] cannot move a container to an occupied location")
        
        return False




    def is_legal_ship_move(self,y1,x1,y2,x2):
        return self.is_start_legal(y1,x1) and self.is_end_legal(y2,x2)
    
#calculates manhattan distance between start location (y1,x1) and end location (y2,x2) - FOR ONLY LOCATIONS INSIDE SHIP
    def calculate_time(self,y1,x1,y2,x2):
        return abs(y1-y2) + abs(x1-x2)
    

        # move containers that already exist on the ship
    # [y1,x1]: starting location of container (to be replaced with "UNUSED")
    # [y2,x2]: ending location of container (to be replaced with the moved container)
    def moveContainer(self, y1, x1, y2, x2):
        containerMoving = self.ship_bay_array[y1,x1]

        if(self.is_legal_move(y1,x1,y2,x2) ):
            # TODO: [LOG] container [name] was moved from [startLocation] to [endLocation]
            self.ship_bay_array[y1,x1] = Container(0, "UNUSED")
            self.ship_bay_array[y2,x2] = containerMoving


    # load containers onto the ship
    # containerDescription: the description of a container provided by the operator
    # [y,x]: ending location of container <-- NOTE: in the final implementation, this parameter will be generated by the solution, not the operator
    def loadContainer(self, containerDescription, y, x):
        if containerDescription != "UNUSED" and containerDescription != "NAN":
            if(self.is_end_legal(y,x)):
                    # TODO: [LOG] container [name] was loaded onto the ship. It is located at [y,x]
                    # NOTE: a weight of -1 is given as a placeholder weight since the weight of the container will not be determined until the operator picks up the container during the instruction phase of the program
                    self.ship_bay_array[y,x] = Container(-1, containerDescription)
                
        else:
            print("[ERROR] cannot load a container with the name \"UNUSED\" or \"NAN\"")


    # offload containers onto the ship
    # [y,x]: location of the container to be offloaded <-- NOTE: in the final implementation, this parameter will be generated by the solution, not the operator
    # ERROR CHECKING: a container can only be offloaded if the given location is in the 2D ship_bay_array range and the container being offloaded is NOT "UNUSED" nor "NAN"
    def offloadContainer(self, y, x):
        if(self.is_end_legal(y,x)):
                # TODO: [LOG] container [name] was offloaded from the ship.
                self.ship_bay_array[y,x] = Container(0, "UNUSED")

if __name__ == "__main__":
    


    empty = Container(-1,"UNUSED")
    array = [[empty] * 8 for i in range(12) ]

    """
    for i in array:
         print("[")
         for j in i:
              print(j.description)
         print("]")
    """

    calculator = Calculate(array)
    array[0][0] = Container(1,"CoolCatCars")
    array[1][0] = Container(2,"DogDerbies")

    #TEST 1: is_start_legal - testing out of bounds error checking
    calculator.is_start_legal(8,6)
    calculator.is_start_legal(-1,6)
    calculator.is_start_legal(6,12)
    calculator.is_start_legal(6,-1)

    #TEST 1: is_start_legal - has container above start position
    calculator.is_start_legal(0,0)





     
   
